//
// respond-to mixin
// ----------------
//
// This mixin is used for managing your media queries.
//
// Usage:
//
// Define your breakpoints in variables/_breakpoints.scss, e.g.
//
// fallback settings: if not set, respond-to won't render a fallback
// $respond-to-no-mediaqueries-fallback: desktop;
// $respond-to-fallback-class: lt-ie9;
//
// $break-desktop-min: 921px;
// $break-pad-max: 920px;
// $break-pad-min: 569px;
// $break-phone-max: 568px;
//
// $respond-to-breakpoints: (
//     desktop "(min-width:"+$break-desktop-min+")",
//     pad "(min-width:"+$break-pad-min+") and (max-width:"+$break-pad-max+")",
//     phone "(max-width:"+$break-phone-max+")"
// );
//
//
// Code your mediaqueries/styles in a descending order:
//
// large viewport -> small viewport -> global styles
//
// .my-class {
//
//     // Media Queries
//     @include respond-to(desktop, pad) {
//         color: #ff0;
//     }
//
//     @include respond-to(phone) {
//         color: #f0f;
//     }
//
//     // Global Styles
//     position: relative;
//
// }
//


@mixin respond-to($medias...) {
  $breakpoints_length: length($respond-to-breakpoints);

  @each $media in $medias {
	$had_a_hit: false;

	@for $i from 1 through $breakpoints_length {
	  $breakpoint: nth($respond-to-breakpoints, $i);

	  @if $media == nth($breakpoint, 1) {
		$definition: nth($breakpoint, 2);
		$had_a_hit: true;

		@media #{$definition} {
		  @content;
		}
	  }
	}
	// if these variables are not defined, skip generating fallback
	@if global-variable-exists(respond-to-no-mediaqueries-fallback) and global-variable-exists(respond-to-fallback-class) {
	  @if $media == $respond-to-no-mediaqueries-fallback {
		.#{$respond-to-fallback-class} & {
		  @content;
		}
	  }
	}

	@if $had_a_hit == false {
	  @warn "Media #{media} not found!";
	}
  }
}